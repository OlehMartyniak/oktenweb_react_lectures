1. встановити axios та react-hook-forms;
2. створюємо робочі папки - components(Car,Cars,CarForm),constants(urls),services (axiosService,carService);
3. викликаємо Cars, даємо запит на API по стандарту (через useEffect  викликаємо carService, метод getAll,
   деструктуруємо data, методом map передаємо в компонент Car, де виводимо id,model,price,year);

                                                 Форма

4. в CarForm прописуємо const {register, handleSubmit, reset, setValue, formState:{errors}} = useForm();
    reset - для перезавантаження форми
    setValue - для встановлення інпутів
    formState:{errors} - для пропису помилок

    в <form> на onSubmit передаємо handleSubmit який буде викликати функцію submit (<form onSubmit={handleSubmit(submit)}>)
    {
        required:true - обовязковість заповнювати
        pattern: new RegExp(/^[a-zA-ZА-яіІїЇ]{1,20}$/) - символи які будуть використовуватись і їх кількість ({1,20}$)
        valueAsNumber:true - перетворення стрінги в число
        min:0 - мінімальне число
        max:1000000 - максимальне число
        max:new Date().getFullYear() - поточний рік
    }
    useForm({mode:'all'} - буде викликати errors підказки якщо вони виникають під час заповнення форми (є і інші проперті - напр onsubmit)
    викликаємо форму в <Cars/>

5.                                              Додавання нового <Car/> в API через нашу форму (кнопка save)

    1) в  <form onSubmit={handleSubmit(submit)}> викликається функція submit
    2) прописуємо функцію submit, яка прийматиме обєкт створений формою:

                     const submit = async (newCar)=> {
                         const {data} = await carService.create(newCar)    (деструктуризуємо data, бо її отирмуємо з аксіоса)
                     };

    3) в <Cars/> створюємо функцію addCar, яка прийматиме новий car (переданий з форми) і додаватиме його до вже існуючих
       (тому також викликаємо setCars, аби перезаписати їх):

                        const addCar = (car) => {
                                setCars([...cars,car])
                            };

    4) передаємо функцію addCar в нашу форму в якості пропси: <CarForm addCar={addCar}/>
    5) приймаємо цю пропсу в <CarForm/>:

                        const CarForm = ({addCar}) => {}

    6) тоді передаємо її в функцію submit, де викликаємо її і очищаємо форму функцією reset() :

                        const submit = async (newCar)=> {
                            const {data} = await carService.create(newCar)
                            addCar(data)
                            reset()
                        };

6.                                              Видалення <Car/> (кнопка delete)

    1) в <Cars/> створюємо функцію deleteCar, яка буде асинхронною функцією, що приймає id,
       звертаємось до carService та методу deleteById куди передаємо id (метод delete видалить <Car/> з бази даних),
       тепер потрібно видалити цей <Car/> з масиву; для цього створимо змінну res яка копіює масив cars;
       далі методом findIndex знайдемо індекс, який дорівнює нашій <Car/> (через id);
       робимо перевірку (findIndex повертає -1 якщо не знайде елемент) і видаляємо елемент який не проходить перевірку;
       і тоді звертаємось до методу setCars і передаємо йому масив масив setCars(res)

                            const deleteCar = async (id) => {
                              await carService.deleteById(id);
                              const res = [...cars];
                              const index = res.findIndex(value => value.id === id);
                              if (index !== -1) {
                                  res.splice(index,1);
                                  setCars(res)
                              }
                            };

    2) кладемо цю функцію deleteCar пропсою в {cars.map(car => <Car key={car.id} car={car} deleteCar={deleteCar}/>)};
    3) приймаємо в <Car/> і на кнопці delete встановлюємо подією кліку та передаємо їй id: <button onClick={()=>deleteCar(id)}>Delete</button>

7.                                              Редагування <Car/> (кнопка edit)

    1) редагувати будемо в тій самій формі, в якій створюємо новий обєкт, тому при кліку на Edit потрібно вивести інформацію про обєкт в форму;
       для цього в <Cars/> створимо новий стейт і задамо йому початковий стан null: let [carEdit,setCarEdit] = useState(null);
    2) передамо setCarEdit в наш <Car/> як пропсу: {cars.map(car => <Car key={car.id} car={car} deleteCar={deleteCar} setCarEdit={setCarEdit}/>)};
    3) приймемо пропсу setCarEdit і викличемо її при виклику нажатті клавіші edit і передамо туди наш car: <button onClick={()=>setCarEdit(car)}>Edit</button>
    4) тепер наш початковий carEdit заповнений і передамо його в форму: <CarForm addCar={addCar} carEdit={carEdit}/>
    5) приймемо пропсу carEdit в формі і використаємо useEffect, щоб перезаписати значення у формі:

                            useEffect(()=>{
                                    if(carEdit) {
                                        setValue('model',carEdit.model)
                                        setValue('price',carEdit.price)
                                        setValue('year',carEdit.year)
                                    }
                                },[carEdit])

    6) щоб коли ми редагуємо <Car/> кнопка save у формі ставала кнопкою edit перезапишемо умову кнопки: <button>{carEdit ? 'Edit' : 'Save'}</button>
    7) перезапишемо функціонал кнопки submit відповідно до нової умови:

                            const submit = async (newCar)=> {
                                if (!carEdit) {
                                    const {data} = await carService.create(newCar)
                                    addCar(data)
                                } else {
                                    const {data} = await carService.updateById(carEdit.id,newCar);
                                }
                                reset()
                            };

    8) Тепер оновлену інформацію нам потрібно перезаписати в масиві cars (<Cars/>), для цього створимо функцію updateCar:

                            const updateCar = (car) => {
                                const res = [...cars];
                                const find = res.find(value => value.id === carEdit.id);
                                Object.assign(find,car);
                                setCars(res);
                                setCarEdit(null);
                            }

    9) тепер передамо  цю функцію пропсою в форму: <CarForm addCar={addCar} carEdit={carEdit} updateCar={updateCar}/>
    10) отримаємо пропсу в кар формі і викличемо в функції submit  в розділі else:

                            const submit = async (newCar)=> {
                                if (!carEdit) {
                                    const {data} = await carService.create(newCar)
                                    addCar(data)
                                } else {
                                    const {data} = await carService.updateById(carEdit.id,newCar);
                      !             updateCar(data )
                                }
                                reset()
                            };


